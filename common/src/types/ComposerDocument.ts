
export enum DocumentType {
    Fiction = 'Fiction',
    ResumeCoverLetter = 'Resume And Cover Letter',
    NonFiction = 'Non-Fiction',
    Poetry = 'Poetry',
    Play = 'Play',
    Screenplay = 'Screenplay',
    Other = 'Other',
    Programming = 'Programming',
    Business = 'Business',
    Legal = 'Legal',
    Medical = 'Medical',
    Scientific = 'Scientific',
    Academic = 'Academic',
    Technical = 'Technical',
    OtherNonFiction = 'Other Non-Fiction',
    OtherFiction = 'Other Fiction',
}

export interface ComposerDocument {
    id: string;
    metaData: Section[];
    docOutline: Section[];
    title: string;
    author: string; // user.
    documentType: DocumentType;
}

export function blankFictionDocument(): ComposerDocument {
    // this is the template, bring in the template from the prompt json
    return {
        id: "blank",
        metaData: [
            {
                "id": "1",
                "title": "Plot Summary",
                "label": "Summary",
                "content": "",
                "icon": "font_download",
                "allowsChildren": false,
                "instructions": "Provide a summary of the plot for your story"
            },
            {
                "id": "2",
                "title": "Setting and Timeline",
                "label": "Setting",
                "content": "",
                "icon": "warning",
                "allowsChildren": false,
                "instructions": "What is the setting, era, and timeline of your story.  Describe it here."
            },
            {
                "id": "3",
                "title": "Characters",
                "label": "Characters",
                "content": "",
                "icon": "today",
                "allowsChildren": true,
                "instructions": "Add your characters here"
            },
            {
                "id": "4",
                "title": "Writing Style",
                "label": "Style",
                "content": "",
                "icon": "print",
                "allowsChildren": false,
                "instructions": "Describe the writing style you would like to use.  Like one of your favor authors or a genre."
            },
            {
                "id": "5",
                "title": "Length of Book",
                "label": "Length",
                "content": "",
                "icon": "style",
                "allowsChildren": false,
                "instructions": "How long do you want this story to be in pages, chapters or sentences."
            }
        ],
        docOutline: [],
        title: '',
        author: '',
        documentType: DocumentType.Other,
    }
}

// export function blankResumeCoverLetterDocument(): ComposerDocument {
//     // while starting up this document we need to go fetch info about the company, when do we do that?
//     return {
//         id: "blank",
//         metaData: [
//             job description,
//             personal information,
//             job history,
//             education,
//             example cover letter (for style),
//             compfany name
//         ],
//         docOutline: [
//             resume (recursive, with sections for experionce, accomplishments, education, etc),
//             cover letter
//         ],
//         title: '',
//         author: '',
//         documentType: DocumentType.Other,
//     }
// }

export interface Section {
    id: string;
    label: string; // single word label
    title: string; // long form title
    content: string; // the actucal save data
    sectionPrompt?: string; // the prompt for the section (if any) hidden from user, optional,
    description?: string; // description of the section, summary, can be generated y the user, or generated by the system
    summary?: string; // summary of the section, can be generated by the user, or generated by the system
    // two types of summarization: pulling sentences out of the source text, or generating a summary from the source text

    type?: string; // section editor type
    icon?: string;
    instructions?: string;  // instrcutions for filling out the data
    children?: Section[];
    allowsChildren: boolean;
}